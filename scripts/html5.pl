#!/usr/bin/env perl

use strict;
use warnings;

my @elements = qw(
  html

  base head link meta style title

  body

  address article aside footer header
  h1 h2 h3 h4 h5 h6 main nav section

  blockquote dd div dl dt figcaption figure
  hr li menu ol p pre ul

  a abbr b bdi bdo br cite code data em
  i kbd mark q rp rt ruby s samp small
  span strong sub sup time u var wbr

  area audio img map track video

  embed iframe object picture portal source

  svg math

  canvas noscript script

  del ins

  caption col colgroup table tbody td tfoot
  th thead tr

  button datalist fieldset form input
  label legend meter optgroup option
  output progress select textarea

  details dialog summary

  slot template
);

print q{
  // This package contain helper functions to make html as code.
  package html

  // THIS FILE GENERATED BY SCRIPT. YOU SHOULD NOT EDIT THIS FILE.

  import "github.com/nyarla/hyperscript/node"
};

for my $el (@elements) {
    my $func = ucfirst($el);

    print qq<
    // $func makes to a `$el` element.
    func $func (contains ...node.NodeStringer) node.NodeStringer {
      return node.Node(`$el`, contains...)
    }
  >;
}

my @attrs = qw(
  accept
  accept-Charset
  accessKey
  action
  allow
  alt
  async
  autoCapitalize
  autoComplete
  autoFocus
  autoPlay
  buffered
  capture
  challenge
  charset
  checked
  cite
  class
  cols
  colspan
  content
  contentEditable
  contextMenu
  controls
  coords
  crossOrigin
  datetime
  decoding
  default
  defer
  dir
  dirname
  disabled
  download
  draggable
  enctype
  for
  form
  formAction
  formEnctype
  formMethod
  formNovalidate
  formTarget
  headers
  height
  hidden
  high
  href
  hreflang
  httpEquiv
  id
  integrity
  ismap
  itemProp
  keytype
  kind
  label
  lang
  list
  loop
  low
  max
  maxLength
  minLength
  media
  method
  min
  multiple
  muted
  name
  novalidate
  open
  optimum
  pattern
  ping
  placeholder
  playSinline
  poster
  preload
  readonly
  referrerPolicy
  rel
  required
  reversed
  role
  rows
  rowSpan
  sandbox
  scope
  scoped
  selected
  shape
  size
  sizes
  slot
  span
  spellCheck
  src
  srcdoc
  srcLang
  srcSet
  start
  step
  style
  summary
  tabIndex
  target
  title
  translate
  type
  useMap
  value
  width
  wrap
);

for my $src (@attrs) {
    my $attr = lc $src;

    my $func = ucfirst $src;
    $func =~ s{-}{}g;

    if ( grep { $_ eq $attr } @elements ) {
        $func = "${func}A";
    }

    print qq<
      // $func makes to a `$attr` html attribute. 
      func $func (v string) node.NodeStringer {
        return node.Attr(\`$attr\`, v)
      }
    >;
}
